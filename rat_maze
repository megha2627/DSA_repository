Consider a rat placed at position (0, 0) in an n x n square matrix mat. The rat's goal is to reach the destination at position (n-1, n-1). The rat can move in four possible directions: 'U'(up), 'D'(down), 'L' (left), 'R' (right).


//{ Driver Code Starts
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt(); // Number of test cases
        sc.nextLine();        // Consume the newline character

        while (t-- > 0) {
            String input = sc.nextLine();

            // Replace ][ with ],[
            input = input.replace("][", "],[");

            ArrayList<ArrayList<Integer>> mat = new ArrayList<>();
            String[] rows = input.split("],\\s*\\[");

            for (String row : rows) {
                row = row.replaceAll("[\\[\\]]", ""); // Remove any surrounding brackets
                ArrayList<Integer> intRow = new ArrayList<>();
                for (String num : row.split(",")) {
                    intRow.add(Integer.parseInt(num.trim()));
                }
                mat.add(intRow);
            }

            Solution obj = new Solution();
            ArrayList<String> result = obj.findPath(mat);

            if (result.isEmpty()) {
                System.out.println("[]");
            } else {
                for (String res : result) {
                    System.out.print(res + " ");
                }
                System.out.println();
            }
            System.out.println("~");
        }
        sc.close();
    }
}

// } Driver Code Ends




// User function Template for Java

class Solution {
    // Function to find all possible paths
    ArrayList<String> result=new ArrayList<>();
    public void solve(int i,int j,ArrayList<ArrayList<Integer>> maze,int n,StringBuilder temp){
          if((i<0 || i>=n||j<0 ||j>=n)|| maze.get(i).get(j)==0) {
              return;
          }
          if(i==n-1 && j==n-1){
              result.add(temp.toString());
              return;
          }
          maze.get(i).set(j,0);
          
          temp.append("D");
          solve(i+1,j,maze,n,temp);
          temp.deleteCharAt(temp.length()-1);
          
          temp.append("L");
          solve(i,j-1,maze,n,temp);
          temp.deleteCharAt(temp.length()-1);
          
          temp.append("R");
          solve(i,j+1,maze,n,temp);
          temp.deleteCharAt(temp.length()-1);
          
          temp.append("U");
          solve(i-1,j,maze,n,temp);
          temp.deleteCharAt(temp.length()-1);
          
           maze.get(i).set(j,1);
    }
    public ArrayList<String> findPath(ArrayList<ArrayList<Integer>> mat) {
        // code here
        StringBuilder temp=new StringBuilder();
        int  n=mat.size();
          if (mat.get(0).get(0) == 0) {
            return result;
        }
        solve(0,0,mat,n,temp);
        return result;
        
    }
}