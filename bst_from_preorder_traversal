Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.

It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.

A binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, and any descendant of Node.right has a value strictly greater than Node.val.

A preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
  
public class Solution {
    
    // Function to insert a node in a BST
    public TreeNode insert(TreeNode root, int value) {
        // If the tree is empty, create a new node and return it
        if (root == null) {
            return new TreeNode(value);
        }
        
        // Recur down the tree
        if (value < root.val) {
            root.left = insert(root.left, value);
        } else if (value > root.val) {
            root.right = insert(root.right, value);
        }

        // Return the unchanged node pointer
        return root;
    }

    // Function to construct a BST from an array of values
    public TreeNode bstFromPreorder(int[] values) {
        TreeNode root = null;
        for (int value : values) {
            root = insert(root, value);  // Insert each value into the BST
        }
        return root;
    }
}
    