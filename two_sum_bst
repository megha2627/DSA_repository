Given the root of a binary search tree and an integer k, return true if there exist two elements in the BST such that their sum is equal to k, or false otherwise.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    ArrayList<Integer> preorder=new ArrayList<>();
    public boolean findTarget(TreeNode root, int k) {
        if(root==null){
            return true;
        }
        findTarget(root.left,k);
        preorder.add(root.val);
        findTarget(root.right,k);

        int left=0;
        int right=preorder.size()-1;
        while((left<preorder.size() && right>=0) && (left!=right)){
            if(preorder.get(left)+preorder.get(right)==k){
                return true;
            }
            else if(preorder.get(left)+preorder.get(right)<k){
                left++;
            }
            else{
                right--;
            }
        }
        return false;
        
    }
}