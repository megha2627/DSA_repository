Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null){
            return null;
        }
        else if(root.val>key){
            root.left=deleteNode(root.left,key);
        }
        else if(root.val<key){
            root.right=deleteNode(root.right,key);
        }
        else{
            if(root.left==null && root.right==null){
                root=null;
            }
            else if(root.right!=null){
                root.val=precessor(root);
                root.right=deleteNode(root.right,root.val);
            }
            else if(root.left!=null){
                root.val=successor(root);
                root.left=deleteNode(root.left,root.val);
            }
        }
        return root;

        
    }
    public int successor(TreeNode root){
        root=root.left;
        while(root.right!=null){
            root=root.right;
        }
        return root.val;
    }
     public int precessor(TreeNode root){
        root=root.right;
        while(root.left!=null){
            root=root.left;
        }
        return root.val;
    }
}