Given the head of a singly linked list, return true if it is a 
palindrome
 or false otherwise.


 /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        ArrayList<Integer> list = new ArrayList<>();
        ListNode current = head;
        
        // Collect values from the linked list
        while (current != null) {
            list.add(current.val);
            current = current.next;
        }
        
        // Check if the collected values form a palindrome
        int left = 0;
        int right = list.size() - 1;
        
        while (left < right) {
            if (!list.get(left).equals(list.get(right))) {
                return false; // Not a palindrome
            }
            left++;
            right--;
        }
        
        return true; // It is a palindrome
    }
}